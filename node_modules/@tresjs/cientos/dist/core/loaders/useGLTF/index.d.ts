import { GLTFLoader } from 'three-stdlib';
import type { TresObject3D } from '@tresjs/core';
export interface GLTFLoaderOptions {
    /**
     * Whether to use Draco compression.
     *
     * @type {boolean}
     * @memberof GLTFLoaderOptions
     */
    draco?: boolean;
    /**
     * The path to the Draco decoder.
     *
     * @type {string}
     * @memberof GLTFLoaderOptions
     */
    decoderPath?: string;
}
export interface GLTFResult {
    animations: Array<THREE.AnimationClip>;
    nodes: Record<string, TresObject3D>;
    materials: Record<string, THREE.Material>;
    scene: THREE.Scene;
}
/**
 * Loads a GLTF file and returns a THREE.Object3D.
 *
 * @export
 * @param {(string | string[])} path
 * @param {GLTFLoaderOptions} [options={
 *     draco: false,
 *   }]
 * @param {(loader: GLTFLoader) => void} [extendLoader]
 * @return {*}  {Promise<GLTFResult>}
 */
export declare function useGLTF<T extends string | string[]>(path: T, options?: GLTFLoaderOptions, extendLoader?: (loader: GLTFLoader) => void): Promise<T extends string[] ? GLTFResult[] : GLTFResult>;
